/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InputChangeEventDetail } from "./components/input/input";
export { InputChangeEventDetail } from "./components/input/input";
export namespace Components {
    interface TestInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: 'email' | 'hidden' | 'number' | 'password' | 'tel' | 'text' | 'checkbox' | 'radio' | 'select' | 'textarea' | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
}
export interface TestInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTestInputElement;
}
declare global {
    interface HTMLTestInputElementEventMap {
        "scale-input": KeyboardEvent;
        "scaleInput": KeyboardEvent;
        "scale-change": InputChangeEventDetail;
        "scaleChange": InputChangeEventDetail;
        "scale-focus": void;
        "scaleFocus": void;
        "scale-blur": void;
        "scaleBlur": void;
        "scale-keydown": KeyboardEvent;
        "scaleKeyDown": KeyboardEvent;
    }
    interface HTMLTestInputElement extends Components.TestInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTestInputElementEventMap>(type: K, listener: (this: HTMLTestInputElement, ev: TestInputCustomEvent<HTMLTestInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTestInputElementEventMap>(type: K, listener: (this: HTMLTestInputElement, ev: TestInputCustomEvent<HTMLTestInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTestInputElement: {
        prototype: HTMLTestInputElement;
        new (): HTMLTestInputElement;
    };
    interface HTMLElementTagNameMap {
        "test-input": HTMLTestInputElement;
    }
}
declare namespace LocalJSX {
    interface TestInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: TestInputCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: TestInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: TestInputCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: TestInputCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: TestInputCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: TestInputCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: TestInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: TestInputCustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: TestInputCustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeyDown"?: (event: TestInputCustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: 'email' | 'hidden' | 'number' | 'password' | 'tel' | 'text' | 'checkbox' | 'radio' | 'select' | 'textarea' | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface IntrinsicElements {
        "test-input": TestInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "test-input": LocalJSX.TestInput & JSXBase.HTMLAttributes<HTMLTestInputElement>;
        }
    }
}
